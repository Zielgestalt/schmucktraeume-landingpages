.text-flow {
  & > *:not(.no-flow) + * {
    margin-top: var(--size-3);
  }

  @for $i from 1 through 10 {
    &.is-flow-#{$i} > *:not(.no-flow) + * {
      margin-top: var(--size-#{$i});
    }
  }
}

.is-pointer {
  cursor: pointer;
}

.is-block {
  display: block;
}

.is-uppercase {
  text-transform: uppercase;
}

.is-underlined {
  text-decoration: underline;
}

.is-relative {
  position: relative;
}

.is-rounded {
  border-radius: 1rem;
  overflow: hidden;
}

.is-hidden-mobile {
  @if map-get($breakpoints, "md") {
    @media (max-width: (map-get($breakpoints, "md") - 1px)) {
      display: none;
    }
  }
}

.has-icon {
  --icon-width: 3rem;

  @if map-get($breakpoints, "md") {
    @media (min-width: map-get($breakpoints, "md")) {
      --icon-width: 3.5rem;
    }
  }

  padding-left: calc(var(--icon-width) + 1rem);
  position: relative;

  svg {
    position: absolute;
    left: 0;
    width: var(--icon-width);
    height: var(--icon-width);
    color: var(--link);
  }
}

.text-link {
  display: inline;
  color: var(--link);

  &.has-icon {
  --icon-width: 1.5rem;   
  }
}

.is-background {
  background-color: #000;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;
}

.is-background, 
.is-background img {
  -o-object-fit: cover;
  object-fit: cover;
  width: 100%;
  height: 100%;
}

.background-mobile-left {
  .is-background img {
    @media (max-width: map-get($breakpoints, "lg")) {
      object-position: left;
    }
  }
}

.flex-end {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

.flex-center {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.is-ff-secondary {
  font-family: var(--ff-secondary);
}

.is-primary {
  --color: var(--clr-primary);
}
